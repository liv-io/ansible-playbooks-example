---

# ALERTMANAGER

alertmanager_config:
  - section: 'global'
    config: |
      smtp_from: 'ls@example.com'
      smtp_hello: 'ls.example.com'
      smtp_smarthost: 'mail.example.com:25'
      smtp_auth_username: ''
      smtp_auth_password: ''
      smtp_require_tls: false

  - section: 'route'
    config: |
      receiver: 'user'
      group_by: ['instance', 'alert']
      group_wait: 1m
      group_interval: 30m
      repeat_interval: 150m
      routes:
      - match:
          severity: 'critical'
        receiver: 'user'

  - section: 'inhibit_rules'
    config: |
      - source_match:
          severity: 'critical'
        target_match:
          severity: 'warning'
        equal: ['alertname']

  - section: 'receivers'
    config: |
      - name: 'user'
        email_configs:
        - to: 'user@example.com'

alertmanager_monitor_monit_state: 'true'

# GRAFANA

grafana_monitor_monit_state: 'true'

grafana_smtp_from_address: 'ls@example.com'

grafana_smtp_from_name: 'ls'

grafana_smtp_host: 'mail.example.com'

grafana_smtp_port: '25'

grafana_smtp_state: 'true'

# LOKI

loki_monitor_monit_state: 'true'

# MOTD

motd_host_description: 'Logging Server'

# NFTABLES

nftables_filter_rule_host: |
  add rule ip filter INPUT ip saddr { 10.1.1.0/24, 10.1.2.0/24, 10.1.3.0/24, 10.1.4.0/24, 10.1.5.0/24 } ct state new tcp dport 514 counter accept comment "syslog from internal-networks"
  add rule ip filter INPUT ip saddr { 10.1.1.0/24, 10.1.2.0/24, 10.1.3.0/24, 10.1.4.0/24, 10.1.5.0/24 } ct state new udp dport 514 counter accept comment "syslog from internal-networks"
  add rule ip filter INPUT ip saddr { 10.1.3.0/24, 10.1.5.0/24 } ct state new tcp dport { 80, 443 } counter accept comment "http, https from n_dmz, n_clients"

# NGINX

nginx_config:
  - name: 'log.example.com'
    alias: ['logs.example.com']
    state: 'true'
    port: 80
    hsts_state: 'true'
    xss_protection_state: 'true'
    config: |
      return 301 https://$server_name$request_uri;

  - name: 'log.example.com'
    alias: ['logs.example.com']
    state: 'true'
    port: 443
    hsts_state: 'true'
    xss_protection_state: 'true'
    ssl_state: 'true'
    ssl_ecdh_curve: 'secp384r1'
    ssl_certificate: '/etc/ssl/example/wildcard.example.com.crt'
    ssl_certificate_key: '/etc/ssl/example/wildcard.example.com.pem'
    config: |
      location / {
        proxy_pass                         http://localhost:3000/;
        proxy_http_version                 1.1;
        proxy_set_header Upgrade           $http_upgrade;
        proxy_set_header Connection        "Upgrade";
        proxy_set_header Host              $host;
        proxy_set_header X-Real-IP         $remote_addr;
        proxy_set_header X-Forwarded-For   $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
      }

# PROMTAIL

promtail_monitor_monit_state: 'true'

promtail_pipeline_stages_host: |
  {% raw %}
  # Extract Nginx labels
  - match:
      selector: '{app="nginx"}'
      stages:
      - regex:
          expression: 'remote_addr:(?P<nginx_remote_addr>(\S+))'
      - regex:
          expression: 'request:"(?P<nginx_header>(\w+))'
      - regex:
          expression: 'status:(?P<nginx_status>([0-9]{3}))'
      - regex:
          expression: 'http_x_forwarded_for:"(?P<nginx_http_x_forwarded_for>((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)(\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3})|\-)"'
      - labels:
          nginx_remote_addr:
          nginx_header:
          nginx_status:
          nginx_http_x_forwarded_for:

  # Extract Apache HTTPD labels
  - match:
      selector: '{app="httpd"}'
      stages:
      - regex:
          expression: 'remote_addr:(?P<httpd_remote_addr>(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)(\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3})'
      - regex:
          expression: 'remote_user:(?P<httpd_user>(\S+))'
      - regex:
          expression: 'request:"(?P<httpd_header>(\S+))'
      - regex:
          expression: 'status:(?P<httpd_status>([0-9]{3}))'
      - labels:
          httpd_remote_addr:
          httpd_user:
          httpd_header:
          httpd_status:

  # Extract Suricata labels
  - match:
      selector: '{app="suricata"}'
      stages:
      - regex:
          expression: '\[\d{1,10}:(?P<suricata_sid>(\d{1,10})):\d{1,10}\]'
      - regex:
          expression: '(?:.+\[\d{1,10}:\d{1,10}:\d{1,10}\]\s)(?P<suricata_msg>(.+?))\s\['
      - regex:
          expression: '(?:.+\[\d{1,10}:\d{1,10}:\d{1,10}\])(?:.+\[Classification:\s)(?P<suricata_class>(.+?))\]\s\['
      - regex:
          expression: '(?:.+\[\d{1,10}:\d{1,10}:\d{1,10}\])(?:.+\[Priority:\s)(?P<suricata_priority>([1-4]))\]\s\{'
      - regex:
          expression: '(?:.+\[\d{1,10}:\d{1,10}:\d{1,10}\])(?:.+\]\s\{)(?P<suricata_protocol>(.+?))\}\s'
      - regex:
          expression: '(?:.+\[\d{1,10}:\d{1,10}:\d{1,10}\])(?:.+\}\s)(?P<suricata_src_ip>((?:[0-9]{1,3}\.){3}[0-9]{1,3})):[0-9]+\s->\s'
      - regex:
          expression: '(?:.+\[\d{1,10}:\d{1,10}:\d{1,10}\])(?:.+\}\s)(?:[0-9]{1,3}\.){3}[0-9]{1,3}:(?P<suricata_src_port>([0-9]+))\s->\s'
      - regex:
          expression: '(?:.+\[\d{1,10}:\d{1,10}:\d{1,10}\])(?:.+\s->\s)(?P<suricata_dst_ip>((?:[0-9]{1,3}\.){3}[0-9]{1,3})):[0-9]+'
      - regex:
          expression: '(?:.+\[\d{1,10}:\d{1,10}:\d{1,10}\])(?:.+\s->\s(?:[0-9]{1,3}\.){3}[0-9]{1,3}:)(?P<suricata_dst_port>([0-9]+))'
      - labels:
          suricata_sid:
          suricata_msg:
          suricata_class:
          suricata_priority:
          suricata_protocol:
          suricata_src_ip:
          suricata_src_port:
          suricata_dst_ip:
          suricata_dst_port:
  {% endraw %}

# RESTIC

restic_state: 'remove'

# RSYSLOG

rsyslog_config_host:
  - name: nginx
    comment: Nginx
    section: input
    config:
      - {type: imfile, File: '/var/log/nginx/*_access.log', Tag: nginx, Severity: info, Facility: local6}
      - {type: imfile, File: '/var/log/nginx/*_error.log', Tag: nginx, Severity: info, Facility: local6}

rsyslog_role: 'server'
